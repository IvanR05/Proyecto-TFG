---
import { supabase } from "../lib/supabase.js";
import AppLayout from "../layouts/AppLayout.astro";
import HorarioClases from "../components/HorarioClases.astro";
import FreeGuardiasDisplayer from "../components/FreeGuardiasDisplayer.astro";
import GuardiasToggle from "../components/GuardiasToggle.astro";
import OwnedGuardiasDisplayer from "../components/OwnedGuardiasDisplayer.astro";
import turnos from "../assets/turnos.json";

let turno;

// Get current session
const {
  data: { session },
} = await supabase.auth.getSession();
if (!session) throw new Error("User is not logged in");

// Fetch the user record from 'usuarios' using .single()
const { data: user, error: userError } = await supabase
  .from("usuarios")
  .select("*")
  .eq("auth_id", session.user.id)
  .single();
if (userError) throw userError;

const { data: turnoData, error: turnoError } = await supabase
  .from("horarios_profesor")
  .select("turno, inicio")
  .eq("id_profesor", user.id);

if (turnoError) throw turnoError;

turno = turnoData[0].turno;

const turnoActual = turnos[turno];

// Fetch aulas data from Supabase
const { data: aulasData, error: aulasError } = await supabase
  .from("aulas")
  .select("*");
---

<AppLayout page_title="Home">
  <h1>Bienvenido <span id="userName">{user.nombre}</span></h1>
  <p>Este es el horario para el día de hoy:</p>
  <HorarioClases />

  <GuardiasToggle>
    <div slot="mis-guardias">
      <OwnedGuardiasDisplayer />
    </div>

    <div slot="guardias-disponibles">
      <FreeGuardiasDisplayer />
    </div>
  </GuardiasToggle>
  <br /><br /><br /><br /><br /><br />
  <!--Deja espacio para la NavBar -->

  <div id="info-modal" class="modal">
    <div class="modal-content">
      <div class="modal-section">
        <h3 class="modal-title">Detalles de Guardia</h3>
        <div class="modal-body">
          <p id="profesdispo"><strong>Profes disponibles:</strong> <span id="info-profes-dispo"></span></p> 
          <p><strong>Fecha:</strong> <span id="info-fecha"></span></p>
          <p><strong>Hora:</strong> <span id="info-hora"></span></p>
          <p><strong>Aula:</strong> <span id="info-aula"></span></p>
          <p><strong>Tipo:</strong> <span id="info-tipo"></span></p>
          <p>
            <strong>Observaciones:</strong>
            <span id="info-observaciones"></span>
          </p>
          <p>
            <strong>Ausencias:</strong> <br>
            <span id="info-ausencias"></span>
            <textarea class="hide-this" id="info-ausencias-edit"></textarea>
          </p>
        </div>

        <div class="modal-buttons">
          <button type="button" id="asignarb" class="close-modal hide-this">Asignar</button>
          <button type="button" id="closeb"  class="close-modal">Cerrar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Modal -->
  <div id="edit-modal" class="modal">
    <div class="modal-content">
      <div class="modal-section">
        <h3 class="modal-title">Editar Guardia</h3>
        <form id="edit-guardia-form" class="modal-form">
          <input type="hidden" id="edit-guardia-id" />

          <!-- Nuevo campo para la fecha -->
          <label>Fecha:</label>
          <input type="date" id="edit-fecha" required />

          <!-- Selector de tramo horario -->
          <label>Tramo Horario:</label>
          <select id="edit-tramo" required>
            <option value="">Selecciona un tramo</option>
            <optgroup label="Tramos disponibles">
              {
                turnoActual.map((tramo, index) => (
                  <option value={JSON.stringify(tramo)}>
                    {tramo.start} - {tramo.end}
                  </option>
                ))
              }
            </optgroup>
          </select>

          <!-- Campos restantes -->
          <label>Tipo:</label>
          <select id="edit-tipo" required>
            <option value="Recreo">Recreo</option>
            <option value="Clase">Clase</option>
          </select>

          <label>Aula:</label>
          <select id="edit-aula" required>
            <option value="">Selecciona un aula</option>
            <optgroup label="Aulas disponibles">
              {
                aulasData?.map((aula, index) => (
                  <option value={JSON.stringify(aula)}>{aula.id_aula}</option>
                ))
              }
            </optgroup>
          </select>

          <label>Observaciones:</label>
          <textarea id="edit-observaciones"></textarea>

          <label>Ausencias:</label>
          <textarea id="edit-ausencias"></textarea>

          <div class="modal-buttons">
            <button type="submit" class="confirm-button">Guardar Cambios</button
            >
            <button type="button" id="close-edit-modal" class="close-modal"
              >Cancelar</button
            >
          </div>
        </form>
      </div>
    </div>
  </div>
</AppLayout>

<script is:inline>
  // Info Modal Handling
  document.addEventListener("open-info-modal", (e) => {
    const guardia = e.detail.guardia;
    
    const isMini = e.detail.isMini;
    const isOwned = e.detail.isOwned;
    
    let profesDispo;
    let isActivada;
    let isAsignada;
    if(isMini) {
      isActivada = e.detail.isActivada;
      isAsignada = e.detail.isAsignada;
      profesDispo = e.detail.profesDispo;
    }
    const modal = document.getElementById("info-modal");

    const asignarButton = document.getElementById("asignarb");
    const cerrarButton = document.getElementById("closeb");

    asignarButton?.addEventListener("click", async function(e) {
      addAsignacionGuardia(guardia);
    })

    cerrarButton.addEventListener('click', async (e) => {
        e.stopImmediatePropagation();

        console.log(isOwned);
        
        if(!isOwned){
          location.reload();
          return;
        } 

        const nuevasAusencias = document.getElementById('info-ausencias-edit').value;
        
        try {
            const response = await fetch('/api/update-guardia', {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ...guardia,
                    ausencias: nuevasAusencias
                })
            });
            
            if (!response.ok) throw new Error('Error al guardar');
            
            modal.classList.remove("show");
            location.reload();
        } catch (error) {
            console.error('Error:', error);
            alert(error.message || 'Error guardando ausencias');
        }
    });


    // A parte de mostrar la propia informacion de la guardia.

    // Si viene de mini:
    // - Si no está asignada: Mostrar profesores que pueden asignarse. Si eres admin poder elegir a quien asignar
    // - Si está asignada: mostrar profesor asignado

    // Si no viene de mini:
    // - Si está owned: poder editar las ausencias. (añadir boton de guardado etc)

    

    if(isMini){
      document.getElementById("profesdispo").classList.remove("hide-this");
      document.getElementById("info-ausencias").classList.remove("hide-this");
      document.getElementById("info-ausencias-edit").classList.add("hide-this");
      
      if(!isAsignada && isActivada){ // Si no está cogida y está activa, mostramos boton
        document.getElementById("asignarb").classList.remove("hide-this");
      } else {
        document.getElementById("asignarb").classList.add("hide-this");
      } 
    }
    if(!isMini){
      document.getElementById("profesdispo").classList.add("hide-this");
      if(isOwned){
        document.getElementById("asignarb").classList.add("hide-this");
        document.getElementById("info-ausencias-edit").classList.remove("hide-this");
        document.getElementById("info-ausencias").classList.add("hide-this");
      } else {
        document.getElementById("asignarb").classList.remove("hide-this");
        document.getElementById("info-ausencias").classList.remove("hide-this");
        document.getElementById("info-ausencias-edit").classList.add("hide-this");
      }
    }

    


    // Formatear fechas
    const fechaOptions = {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    };
    const horaOptions = { hour: "2-digit", minute: "2-digit" };

    // Establecer valores
    document.getElementById("info-fecha").textContent = new Date(
      guardia.inicio,
    ).toLocaleDateString("es-ES", fechaOptions);

    document.getElementById("info-hora").textContent =
      `${new Date(guardia.inicio).toLocaleTimeString("es-ES", horaOptions)} - 
      ${new Date(guardia.fin).toLocaleTimeString("es-ES", horaOptions)}`;

    document.getElementById("info-aula").textContent = guardia.id_aula;
    document.getElementById("info-tipo").textContent = guardia.tipo;
    document.getElementById("info-observaciones").textContent =
      guardia.observaciones || "Ninguna";
      document.getElementById("info-ausencias").textContent =
      guardia.ausencias || "Ninguna";
    document.getElementById("info-ausencias-edit").textContent = guardia.ausencias;
    document.getElementById("info-profes-dispo").textContent = (!profesDispo || profesDispo.length == 0) ? "Ninguno" : profesDispo.join(", ");

    modal.classList.add("show");
  });

  /* Edit modal */
  document.addEventListener("open-edit-modal", (e) => {
    e.stopPropagation();

    const guardia = e.detail;
    const modal = document.getElementById("edit-modal");

    // Convertir fecha existente a formato YYYY-MM-DD
    const fecha = new Date(guardia.inicio).toISOString().split("T")[0];
    document.getElementById("edit-fecha").value = fecha;
    document.getElementById("edit-guardia-id").value = guardia.id;

    // Buscar el tramo correspondiente
    const startTime = new Date(guardia.inicio).toTimeString().slice(0, 5);
    const endTime = new Date(guardia.fin).toTimeString().slice(0, 5);

    // Seleccionar tramo horario
    const tramoOptions = document.getElementById("edit-tramo").options;
    for (let i = 0; i < tramoOptions.length; i++) {
      const tramo = JSON.parse(tramoOptions[i].value || "{}");
      if (tramo.start === startTime && tramo.end === endTime) {
        tramoOptions.selectedIndex = i;
        break;
      }
    }

    // Seleccionar aula correcta
    const aulaSelect = document.getElementById("edit-aula");
    for (let i = 0; i < aulaSelect.options.length; i++) {
      if (aulaSelect.options[i].value) {
        try {
          const aula = JSON.parse(aulaSelect.options[i].value);
          if (aula.id_aula === guardia.id_aula) {
            aulaSelect.selectedIndex = i;
            break;
          }
        } catch (error) {
          console.error("Error parsing aula:", error);
        }
      }
    }

    // Resto de campos
    document.getElementById("edit-tipo").value = guardia.tipo;
    document.getElementById("edit-observaciones").value = guardia.observaciones;
    document.getElementById("edit-ausencias").value = guardia.ausencias;

    modal.classList.add("show");
  });

  // Submit handler actualizado
  document
    .getElementById("edit-guardia-form")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      try {
        // Validar campos
        const fecha = document.getElementById("edit-fecha").value;
        const tramo = JSON.parse(document.getElementById("edit-tramo").value);
        const aulaSelect = document.getElementById("edit-aula");

        if (!fecha || !tramo || !aulaSelect.value) {
          alert("Por favor completa todos los campos requeridos");
          return;
        }

        // Parsear aula
        const selectedAula = JSON.parse(aulaSelect.value);

        const updatedGuardia = {
          id: document.getElementById("edit-guardia-id").value,
          inicio: new Date(`${fecha}T${tramo.start}`).toISOString(),
          fin: new Date(`${fecha}T${tramo.end}`).toISOString(),
          tipo: document.getElementById("edit-tipo").value,
          id_aula: selectedAula.id_aula,
          observaciones: document.getElementById("edit-observaciones").value,
          ausencias: document.getElementById("edit-ausencias").value,
        };

        const response = await fetch("/api/update-guardia", {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updatedGuardia),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || `Error: ${response.status}`);
        }

        closeEditModal();
        location.reload();
      } catch (error) {
        console.error("Error actualizando guardia:", error);
        alert(error.message || "Error al actualizar la guardia");
      }
    });

    // Close both modals with same class
    document.querySelectorAll(".close-modal").forEach(button => {
      button.addEventListener("click", () => {
        document.querySelectorAll(".modal").forEach(modal => {
          modal.classList.remove("show");
        });
      });
    });

    async function addAsignacionGuardia(guardia) {
      const userData = await fetch("/api/auth/get-user");
      const user = await userData.json();

      const data = { id_guardia: guardia.id, id_usuario: user.id };

      try {
        const response = await fetch("/api/add-asignaciones-guardia", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });
        if (!response.ok) throw new Error(`Error: ${response.status}`);
        window.location.reload();
      } catch (error) {
        console.error("Error en la petición:", error);
      }
    }
</script>

<style>
  body {
    background-color: rgb(226, 251, 255);
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }

  .modal.show {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    background-color: white;
    padding: 2rem;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .modal-section {
    padding: 10px;
  }

  .modal-title {
    margin-bottom: 1.5rem;
    color: #1a237e;
  }

  .modal-buttons {
    margin-top: 1.5rem;
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }

  /* Shared Form Styles */
  .modal-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
    color: #333;
  }

  .form-input,
  .form-select,
  .form-textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
  }

  .form-textarea {
    min-height: 100px;
    resize: vertical;
  }

  /* Info Modal Specific Styles */
  #info-modal .modal-content {
    max-width: 600px;
  }

  #info-content {
    line-height: 1.6;
  }

  /* Edit Modal Specific Styles */
  #edit-modal .form-select {
    appearance: none;
    background-image: url("data:image/svg+xml;charset=US-ASCII,...");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 0.65em auto;
  }

  /* Shared Button Styles */
  .confirm-button {
    background-color: #2196f3;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .close-modal {
    background-color: #f44336;
    color: white;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .hide-this {
    display: none;
  }

  textarea {
    width: 100%;
  }
</style>
