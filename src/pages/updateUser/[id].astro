---
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../lib/supabase.js";

const { id } = Astro.params;
// Obtener datos del usuario
const { data: usuario, error } = await supabase
  .from("usuarios")
  .select("*")
  .eq("id", id)
  .single();

// Obtener guardias existentes
// Obtener guardias existentes con valor por defecto

const { data: guardiasExistentes, error: errorGuardias } = await supabase
  .from("horarios_profesor")
  .select("dia_semana, inicio, fin, turno")
  .eq("id_profesor", id);
const formatHora = (hora) => hora.slice(0, 5); // Extrae solo "HH:mm"
const preloadedGuardias = Array.isArray(guardiasExistentes)
  ? guardiasExistentes.map((g) => ({
      id: `${g.dia_semana}-${formatHora(g.inicio)}-${formatHora(g.fin)}`, // ID en el formato deseado
      hora: `${formatHora(g.inicio)} - ${formatHora(g.fin)}`, // Formato de hora
      dia: g.dia_semana, // D√≠a de la semana
      turno: g.turno, // Turno
    }))
  : [];

const guardiasData = (guardiasExistentes || []).map(
  (g: { inicio: string; fin: string; dia_semana: string; turno: string }) => ({
    id: `${g.dia_semana}-${formatHora(g.inicio)}-${formatHora(g.fin)}`, // ID en el formato deseado
    hora: `${formatHora(g.inicio)} - ${formatHora(g.fin)}`, // Formato de hora
    dia: g.dia_semana,
    turno: g.turno,
  })
);
try {
  const serializedGuardias = JSON.stringify(preloadedGuardias);
  console.log("Serialized JSON guardias:", serializedGuardias);
} catch (error) {
  console.error("Error al serializar guardias:", error);
}

if (error || !usuario) {
  alert("Hubo un problema al cargar los datos del usuario.");
}

// Redirecci√≥n si hay error
if (error || !usuario) {
  return new Response(null, {
    status: 302,
    headers: {
      Location: "/ViewUsers",
    },
  });
}

// Determinar turno actual
const turnoActual =
  guardiasExistentes && guardiasExistentes.length > 0
    ? guardiasExistentes[0].turno
    : "diurno";


declare global {
  interface Window {
    user?: { id: number; nombre: string; correo: number; tipo: string; auth_id: string }; // Ajusta seg√∫n la estructura de tu usuario
  }
}
---

<Layout page_title={`Editar Usuario - ${usuario.nombre || "Sin nombre"}`}>
  <script define:vars={{ guardiasData }}>
    // Lado del cliente
    console.log("Guardias:", guardiasData);
    window.preloadedGuardiasData = guardiasData;
  </script>
  <main class="edit-form-container">
    <h1>‚úèÔ∏è Editar Usuario</h1>

    <form id="edit-user-form">
      <div class="form-group">
        <label>Nombre:</label>
        <input
          type="text"
          name="nombre"
          value={usuario.nombre || ""}
          required
        />
      </div>

      <div class="form-group">
        <label>Correo:</label>
        <input type="email" name="correo" value={usuario.correo} required />
      </div>

      <div class="form-group">
        <label>Tipo de usuario:</label>
        <select name="tipo" value={usuario.tipo}>
          <option value="profesor" selected={usuario.tipo === "Profesor"}>Profesor</option>
          <option value="admin" selected={usuario.tipo === "admin"}>Administrador</option>
        </select>
      </div>

      <div class="form-group">
        <label>Estado:</label>
        <div class="status-toggle">
          <label>
            <input type="checkbox" name="aceptado" checked={usuario.aceptado} />
            Usuario activo
          </label>
        </div>
      </div>

      <div class="form-group">
        <label>Turno:</label>
        <select name="turno">
          <option value="diurno" selected={turnoActual === "diurno"}
            >Diurno</option
          >
          <option value="vespertino" selected={turnoActual === "vespertino"}
            >Vespertino</option
          >
        </select>
      </div>

      <input type="hidden" name="id" value={usuario.id} />

      <div class="form-actions">
        <button type="button" id="assignGuardsBtn" class="assign-btn"
          >üìÖ Gestionar Guardias</button
        >
        <button type="submit" class="save-btn">üíæ Guardar cambios</button>
        <a href="/ViewUsers" class="cancel-btn">‚ùå Cancelar</a>
      </div>
    </form>

    <!-- Modal de Horarios -->
    <div id="scheduleTable">
      <h3>Gestor de Guardias</h3>
      <table>
        <thead>
          <tr>
            <th>Horario</th>
            <th>Lunes</th>
            <th>Martes</th>
            <th>Mi√©rcoles</th>
            <th>Jueves</th>
            <th>Viernes</th>
          </tr>
        </thead>
        <tbody id="scheduleBody"></tbody>
      </table>
      <div class="schedule-footer">
        <div class="selection-counter">
          üõ°Ô∏è Seleccionadas: <span id="guardiasCount">0</span>/6
        </div>
        <button id="closeScheduleBtn" class="close-btn">‚úîÔ∏è Confirmar</button>
      </div>
    </div>
  </main>
  <script>
    (async function () {
      try {
        const userData = await fetch("/api/auth/get-user");
  
        if (!userData.ok) {
          throw new Error("Error al obtener los datos del usuario.");
        }
        
  
        window.user = await userData.json() || {};
        console.log("usuario",window.user?.nombre);

      } catch (error) {
        console.error(error);
      }
    })();
  </script>
  <script is:inline>
    // Inicializar con datos precargados
    let selectedCells = window.preloadedGuardiasData || [];
    const maxGuardias = 6;

    // Funci√≥n para debuggear las guardias cargadas
    function logGuardias() {
      console.log("Guardias precargadas:", selectedCells);
      console.log("Celdas seleccionadas:", selectedCells);
    }

    // Llamar a la funci√≥n de debug al cargar
    logGuardias();

    // Funci√≥n para formatear la hora a "hh:mm - hh:mm"
    function formatHora(hora) {
      // Verificar si la hora tiene el formato correcto (HH:mm)
      if (!/^\d{2}:\d{2}/.test(hora)) {
        console.error("Formato de hora incorrecto:", hora);
        return "00:00"; // Devolver un valor por defecto si el formato es incorrecto
      }

      return hora.slice(0, 5); // Extraer HH:mm de la hora
    }

    //Funci√≥n para cargar las horas del horario correspondiente
    async function loadHoras() {
      try {
        const response = await fetch("/src/assets/horario.json");
        return await response.json();
      } catch (error) {
        console.error("Error cargando horario:", error);
        return { diurno: [], vespertino: [] };
      }
    }
    async function createScheduleTable() {
      const horarios = await loadHoras();
      const turno = document.querySelector('[name="turno"]').value;
      const scheduleBody = document.getElementById("scheduleBody");

      scheduleBody.innerHTML = "";
      const horas = horarios[turno] || []; // Obtener las horas seg√∫n el turno seleccionado

      // D√≠a de la semana est√°tico
      const dias = ["Lunes", "Martes", "Miercoles", "Jueves", "Viernes"];

      horas.forEach((hora, i) => {
        const row = document.createElement("tr");
        const [inicio, fin] = hora.split(" - ");
        const horaFormateada = formatHora(hora); // Hora formateada sin segundos

        // Celda de hora
        const horaCell = document.createElement("td");
        horaCell.textContent = hora;
        row.appendChild(horaCell);

        // Crear celdas de d√≠as
        dias.forEach((dia) => {
          const cell = document.createElement("td");
          const cellId = `${dia}-${inicio}-${fin}`; // id √∫nico para la celda (dia-hora)

          cell.dataset.id = cellId;
          cell.dataset.hora = hora;
          cell.dataset.dia = dia;
          cell.dataset.turno = turno;
          cell.style.backgroundColor = "white"; // Forzar fondo blanco
          cell.style.border = "2px solid #000"; // Asegurar el borde desde el inicio

          // Marcar la celda como seleccionada si existe en los datos precargados
          const exists = selectedCells.some(
            (g) => g.id === cellId // Comparar con el id en lugar de hora, dia y turno por separado
          );

          if (exists) {
            // Solo marcar visualmente como seleccionada
            cell.classList.add("selected");
            cell.style.backgroundColor = "#48bb78"; // Fondo verde
            cell.style.color = "white"; // Texto blanco
            cell.style.borderColor = "#38a169"; // Borde verde
          }

          // Evento para seleccionar/deseleccionar celda
          cell.addEventListener("click", () => toggleSelection(cell));
          row.appendChild(cell);
        });

        scheduleBody.appendChild(row);
      });

      updateCounter(); // Actualizar el contador de celdas seleccionadas
    }

    function toggleSelection(cell) {
      const cellId = cell.dataset.id; // Usamos el id de la celda
      const isSelected = cell.classList.contains("selected");

      if (!isSelected && selectedCells.length >= maxGuardias) {
        alert("M√°ximo 6 guardias permitidas");
        return;
      }

      cell.classList.toggle("selected");

      if (isSelected) {
        // Eliminar de selectedCells usando filter, comparando por el id
        selectedCells = selectedCells.filter((g) => g.id !== cellId);
        cell.style.backgroundColor = "white"; // Fondo blanco
        cell.style.color = "black"; // Texto negro
        cell.style.borderColor = "#000"; // Borde original (negro)
      } else {
        console.log("Seleccionando la celda");

        // Agregar a selectedCells, usando el id
        selectedCells.push({
          id: cellId,
          hora: cell.dataset.hora,
          dia: cell.dataset.dia,
          turno: cell.dataset.turno,
        });
        cell.style.backgroundColor = "#48bb78"; // Fondo verde
        cell.style.color = "white"; // Texto blanco
        cell.style.borderColor = "#38a169"; // Borde verde
      }

      updateCounter();
    }

    function updateCounter() {
      // Verificar cu√°ntas celdas est√°n seleccionadas
      console.log("Guardias seleccionadas en el contador:", selectedCells);
      document.getElementById("guardiasCount").textContent =
        selectedCells.length;
    }

    document.getElementById("assignGuardsBtn").addEventListener("click", () => {
      document.getElementById("scheduleTable").style.display = "block";
      createScheduleTable();
    });

    document
      .getElementById("closeScheduleBtn")
      .addEventListener("click", () => {
        document.getElementById("scheduleTable").style.display = "none";
      });

    document.querySelector('[name="turno"]').addEventListener("change", () => {
      selectedCells = selectedCells.filter(
        (g) => g.turno === document.querySelector('[name="turno"]').value
      );
      createScheduleTable();
    });

    document
      .getElementById("edit-user-form")
      .addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = {
          id: e.target.id.value,
          nombre: e.target.nombre.value,
          correo: e.target.correo.value,
          tipo: e.target.tipo.value,
          aceptado: e.target.aceptado.checked,
          turno: e.target.turno.value,
          guardias: selectedCells.map((g) => ({
            dia: g.dia,
            inicio: g.hora.split(" - ")[0],
            fin: g.hora.split(" - ")[1],
            turno: g.turno,
          })),
          nombreAdmin: window.user.nombre
        };

        try {
          const response = await fetch("/api/update-user", {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          });

          if (response.ok) {
            window.location.href = "/ViewUsers?success=Usuario actualizado";
          } else {
            alert("Error al actualizar el usuario");
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Error de conexi√≥n");
        }
      });

  </script>

  <style>
    /* General container for the form */
.edit-form-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  background: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

#scheduleTable {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  width: 90%;
  max-width: 1200px; /* Ensuring the table won't stretch too wide */
  max-height: 80vh;
  overflow-y: auto;
}

#scheduleTable table {
  width: 100%;
  border-collapse: collapse;
  margin: 1.5rem 0;
  border: 2px solid #ddd;
}

#scheduleTable th,
#scheduleTable td {
  border: 2px solid #ddd;
  padding: 1rem;
  text-align: center;
  cursor: pointer;
  background: #f8fafc;
  transition: all 0.2s ease;
}

#scheduleTable th {
  background: #4299e1;
  color: white;
  font-weight: 600;
  border-color: #2b6cb0;
}

#scheduleTable td.selected {
  background: #48bb78 !important;
  color: white;
  border-color: #38a169 !important;
}

/* Form group and inputs */
.form-group {
  margin-bottom: 1.5rem;
}

label {
  display: block;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.5rem;
}

input,
select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

input:focus,
select:focus {
  border-color: #4a90e2;
  outline: none;
}

/* Checkbox style */
.status-toggle {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.form-actions {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 2rem;
}

/* Buttons */
button {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: opacity 0.2s ease;
}

.save-btn {
  background: #48bb78;
  color: white;
}

.cancel-btn {
  background: #e53e3e;
  color: white;
  text-align: center;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  border-radius: 8px;
  cursor: pointer;
  display: inline-block;
  width: auto;
  max-width: 200px;
  margin-top: 1rem;
}

.assign-btn {
  background: #4299e1;
  color: white;
}

button:hover {
  opacity: 0.9;
}

.schedule-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1.5rem;
}

.selection-counter {
  font-weight: 500;
  color: #4a5568;
}

.close-btn {
  background: #48bb78;
  color: white;
}

/* Responsive styles */
@media (max-width: 768px) {
  .edit-form-container {
    padding: 15px;
  }

  #scheduleTable {
    width: 100%;
    padding: 1rem;
  }

  #scheduleTable th,
  #scheduleTable td {
    padding: 0.75rem;
  }

  .form-group {
    margin-bottom: 1.2rem;
  }

  button {
    padding: 0.6rem 1.2rem;
  }

  .cancel-btn {
    padding: 0.6rem 1.2rem;
  }

  .save-btn {
    padding: 0.6rem 1.2rem;
  }
}

@media (max-width: 480px) {
  .edit-form-container {
    padding: 10px;
    max-width: 100%;
  }

  #scheduleTable {
    width: 100%;
    max-height: 70vh;
  }

  #scheduleTable th,
  #scheduleTable td {
    padding: 0.5rem;
    font-size: 0.9rem;
  }

  button {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  }

  .cancel-btn {
    padding: 0.5rem 1rem;
  }

  .save-btn {
    padding: 0.5rem 1rem;
  }
}

/* For mobile optimizations */
@media (max-width: 375px) {
  .form-group label {
    font-size: 0.9rem;
  }

  .form-group input,
  .form-group select {
    font-size: 0.9rem;
  }

  #scheduleTable td,
  #scheduleTable th {
    font-size: 0.9rem;
  }
}
  </style>
</Layout>
