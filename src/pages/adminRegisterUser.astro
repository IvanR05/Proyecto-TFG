<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crear Usuario</title>
    <style>
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f0f4f8;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
      }

      form {
        background: #ffffff;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 450px;
      }

      h1 {
        text-align: center;
        color: #333;
        font-size: 24px;
        margin-bottom: 20px;
      }

      label {
        display: block;
        margin-top: 15px;
        font-weight: 600;
        color: #333;
      }

      input,
      select {
        width: 100%;
        padding: 12px;
        margin-top: 8px;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 16px;
        box-sizing: border-box;
        transition: all 0.3s ease-in-out;
      }

      input:focus,
      select:focus {
        border-color: #28a745;
        outline: none;
      }

      button {
        width: 100%;
        padding: 14px;
        margin-top: 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 18px;
        cursor: pointer;
        transition: background-color 0.3s ease-in-out;
      }

      button:hover {
        background-color: #218838;
      }

      #generatePasswordBtn,
      #togglePasswordBtn {
        background-color: #007bff;
        margin-top: 10px;
      }

      #generatePasswordBtn:hover,
      #togglePasswordBtn:hover {
        background-color: #0056b3;
      }

      #scheduleTable {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        width: 90%;
        max-width: 900px;
        overflow-x: auto;
        border: 2px solid #000 !important;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        border: 2px solid #000;
      }

      th,
      td {
        border: 2px solid #000;
        padding: 15px 10px;
        text-align: center;
        cursor: pointer;
        word-wrap: break-word;
        background-color: #fafafa;
      }

      th {
        background-color: #007bff;
        color: white;
        font-size: 16px;
      }
      .selected {
        background-color: #28a745 !important;
        color: white;
        border: 2px solid #1c7430 !important; /* Borde más oscuro para mejor contraste */
      }

      td {
        font-size: 14px;
        background-color: white;
      }

      @media (max-width: 768px) {
        th,
        td {
          padding: 12px 6px;
          font-size: 14px;
        }

        th {
          font-size: 15px;
        }

        td {
          font-size: 12px;
        }
      }

      @media (max-width: 480px) {
        th,
        td {
          padding: 8px 4px;
          font-size: 12px;
        }

        th {
          font-size: 13px;
        }

        td {
          font-size: 11px;
        }

        table {
          overflow-x: auto;
          -webkit-overflow-scrolling: touch;
        }
      }
    </style>
  </head>
  <body>
    <form id="userForm">
      <h1>Crear Nuevo Usuario</h1>
      <label for="nombre">Nombre:</label>
      <input type="text" id="nombre" name="nombre" required />

      <label for="email">Correo:</label>
      <input type="email" id="email" name="email" required />

      <label for="password">Contraseña:</label>
      <div style="display: flex; flex-direction: column;">
        <input type="password" id="password" name="password" required />
        <button type="button" id="generatePasswordBtn"
          >Generar Contraseña Aleatoria</button
        >
        <button type="button" id="togglePasswordBtn">Ver Contraseña</button>
      </div>

      <label for="tipo">Tipo de Usuario:</label>
      <select id="tipo" name="tipo" required>
        <option value="profesor">Profesor</option>
        <option value="admin">Administrador</option>
      </select>

      <label for="turno">Turno:</label>
      <select id="turno" name="turno" required>
        <option value="diurno">Diurno</option>
        <option value="vespertino">Vespertino</option>
      </select>

      <button type="button" id="assignGuardsBtn">Asignar Guardias</button>
      <button type="submit">Crear Usuario</button>
    </form>

    <div id="scheduleTable">
      <h3>Seleccionar Horas</h3>
      <table>
        <thead>
          <tr>
            <th>Hora</th>
            <th>Lunes</th>
            <th>Martes</th>
            <th>Miércoles</th>
            <th>Jueves</th>
            <th>Viernes</th>
          </tr>
        </thead>
        <tbody id="scheduleBody"></tbody>
      </table>
      <button id="closeScheduleBtn">Cerrar</button>
    </div>

    <script>
      window.onload = function () {
        localStorage.removeItem("selectedCells"); // Limpiar las selecciones al cargar la página
        selectedCells = []; // Limpiar la lista de celdas seleccionadas
      };
      window.addEventListener("DOMContentLoaded", function () {
        localStorage.removeItem("selectedCells"); // Limpiar las selecciones al cargar la página
        selectedCells = []; // Limpiar la lista de celdas seleccionadas
      });

      // Función para generar una contraseña aleatoria
      function generateRandomPassword(length = 12) {
        const charset =
          "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
        let password = "";
        for (let i = 0; i < length; i++) {
          const randomIndex = Math.floor(Math.random() * charset.length);
          password += charset[randomIndex];
        }
        return password;
      }

      // Función para manejar el envío del formulario
      // Al enviar el formulario, recopilar las guardias seleccionadas y agregarlas al formulario
      async function handleSubmit(event) {
        event.preventDefault();
        const formData = new FormData(event.target);

        const guardiasSeleccionadas = getSelectedGuards(); // Obtiene las guardias seleccionadas

        // Agregar las guardias seleccionadas al formData
        formData.append(
          "guardiasSeleccionadas",
          JSON.stringify(guardiasSeleccionadas)
        );

        const response = await fetch("/api/auth/registerAdmin", {
          method: "POST",
          body: formData,
        });

        const message = await response.text();
        alert(message);
      }

      // Asignar el evento para generar la contraseña aleatoria
      const passwordInput = document.getElementById(
        "password"
      ) as HTMLInputElement;
      const generatePasswordBtn = document.getElementById(
        "generatePasswordBtn"
      );
      const togglePasswordBtn = document.getElementById("togglePasswordBtn");

      if (generatePasswordBtn && passwordInput) {
        generatePasswordBtn.addEventListener("click", () => {
          const randomPassword = generateRandomPassword();
          passwordInput.value = randomPassword;
        });
      } else {
        console.error(
          "El botón para generar la contraseña o el campo de contraseña no se encontraron."
        );
      }

      // Asignar el evento para mostrar/ocultar la contraseña
      if (togglePasswordBtn && passwordInput) {
        togglePasswordBtn.addEventListener("click", () => {
          // Alternar entre tipo 'password' y 'text'
          const currentType = passwordInput.type;
          passwordInput.type = currentType === "password" ? "text" : "password";
        });
      } else {
        console.error(
          "El botón para alternar la visibilidad de la contraseña o el campo de contraseña no se encontraron."
        );
      }

      // Asignar el evento de submit al formulario
      const form = document.getElementById("userForm");

      if (form) {
        form.addEventListener("submit", handleSubmit);
      } else {
        console.error("Formulario no encontrado.");
      }

      // Asignar el evento para abrir la tabla de guardias
      let selectedGuardias = 0;

      function openScheduleTable() {
        const table = document.getElementById("scheduleTable");
        if (table) {
          table.style.display = "block";
        }
      }

      function closeScheduleTable() {
        const table = document.getElementById("scheduleTable");
        if (table) {
          table.style.display = "none";
        }
        // NO reiniciamos las selecciones para que se mantengan
      }

      const maxGuardias = 6;
      let selectedCount = 0;

      let selectedCells: string[] = []; // Array para almacenar las celdas seleccionadas

      // Función para cargar las horas desde el archivo JSON
      async function loadHoras() {
        const response = await fetch("/src/assets/horario.json"); // Asegúrate de que el archivo JSON esté en el mismo directorio o usa la ruta correcta
        const horarios = await response.json();
        return horarios;
      }

      let previousTurno = localStorage.getItem("currentTurno");

      const turnoElement = document.getElementById(
        "turno"
      ) as HTMLSelectElement;
      if (turnoElement) {
        turnoElement.addEventListener("change", () => {
          const selectedTurno = turnoElement.value;
          localStorage.removeItem("selectedCells");
          selectedCells = []; // Limpiar la lista local
          createScheduleTable(); // Recrear la tabla con el nuevo turno
        });
      } else {
        console.error("Elemento 'turno' no encontrado.");
      }

      // Función para crear la tabla de horarios con las horas correspondientes
      async function createScheduleTable() {
        const horarios = await loadHoras();
        const turnoElement = document.getElementById(
          "turno"
        ) as HTMLSelectElement | null;

        if (!turnoElement) {
          console.error("El elemento 'turno' no se encuentra.");
          return;
        }

        const selectedTurno = turnoElement.value;

        if (!horarios[selectedTurno]) {
          console.error(
            `El turno ${selectedTurno} no está disponible en los horarios.`
          );
          return;
        }

        const scheduleBody = document.getElementById("scheduleBody");
        if (!scheduleBody) {
          console.error("scheduleBody no encontrado.");
          return;
        }

        scheduleBody.innerHTML = ""; // Limpia la tabla antes de crearla
        const hours = horarios[selectedTurno]; // Obtener las horas según el turno seleccionado

        const selectedCellsFromStorage = JSON.parse(
          localStorage.getItem("selectedCells") || "[]"
        ); // Cargar celdas seleccionadas desde localStorage

        selectedCells = selectedCellsFromStorage; // Asignar las celdas cargadas

        // Iterar sobre las horas
        for (let i = 0; i < hours.length; i++) {
          const row = document.createElement("tr");
          const hourCell = document.createElement("td");
          hourCell.textContent = hours[i]; // Establecer la hora en la primera columna
          row.appendChild(hourCell);

          // Crear celdas para los 5 días de la semana
          for (let j = 0; j < 5; j++) {
            const cell = document.createElement("td");
            cell.textContent = " "; // Añadir contenido para hacer clic
            cell.style.cursor = "pointer";
            cell.style.backgroundColor = "white"; // Forzar fondo blanco
            cell.style.border = "2px solid #000"; // Asegurar el borde desde el inicio

            // Verificar si la celda fue seleccionada previamente y restaurar el estado 
            const cellId = `${i}-${j}`;
            if (selectedCells.includes(cellId)) {
              cell.classList.add("selected");
              cell.style.backgroundColor = "#28a745";
              cell.style.color = "white";
              cell.style.border = "2px solid #1c7430";
            }

            // Pasar los índices i (hora) y j (día) junto con la celda a la función toggleSelection
            cell.addEventListener("click", function () {
              toggleSelection(cell, i, j);
            });

            row.appendChild(cell);
          }

          scheduleBody.appendChild(row);
        }
      }

      // Llamar a la función para crear la tabla cuando se seleccione el turno
      // Asignar el evento para abrir la tabla de guardias
      const assignGuardsBtn = document.getElementById("assignGuardsBtn");
      if (assignGuardsBtn) {
        assignGuardsBtn.addEventListener("click", () => {
          createScheduleTable();
          openScheduleTable();
        });
      } else {
        console.error("Botón 'Asignar Guardias' no encontrado.");
      }

      function toggleSelection(cell, hourIndex, dayIndex) {
        const cellId = `${hourIndex}-${dayIndex}`; // Identificador único de la celda

        if (cell.classList.contains("selected")) {
          // Si la celda ya está seleccionada, deseleccionarla
          cell.classList.remove("selected");
          cell.style.backgroundColor = "white";
          cell.style.color = "black";
          cell.style.border = "2px solid #000";
          selectedCells = selectedCells.filter((id) => id !== cellId); // Eliminar de la lista
        } else {
          // Si la celda no está seleccionada, seleccionarla
          if (selectedCells.length < maxGuardias) {
            cell.classList.add("selected");
            cell.style.backgroundColor = "#28a745";
            cell.style.color = "white";
            cell.style.border = "2px solid #1c7430";
            selectedCells.push(cellId); // Añadir a la lista
          } else {
            alert("Solo puedes seleccionar un máximo de 6 guardias.");
          }
        }

        // Guardar el estado de las celdas seleccionadas en localStorage
        localStorage.setItem("selectedCells", JSON.stringify(selectedCells));
      }

      createScheduleTable();

      function handleGuardSelection(hour, day) {
        selectedGuardias++;
      }
      function getSelectedGuards() {
        const horarios =
          document.querySelectorAll<HTMLTableRowElement>("#scheduleBody tr");
        let selectedGuards: {
          horaInicio: string | null;
          horaFin: string | null;
          dia: string;
        }[] = []; // Se añaden las propiedades 'horaInicio' y 'horaFin'

        horarios.forEach((row, hourIndex) => {
          const hourCell = row.cells[0].textContent; // Obtener el horario de la fila
          if (hourCell) {
            const [horaInicio, horaFin] = hourCell.split("-"); // Separar la hora en dos partes (inicio y fin)
            for (let dayIndex = 1; dayIndex <= 5; dayIndex++) {
              const cell = row.cells[dayIndex];
              if (cell.classList.contains("selected")) {
                selectedGuards.push({
                  horaInicio: horaInicio.trim(), // Asignar la hora de inicio
                  horaFin: horaFin.trim(), // Asignar la hora de fin
                  dia: ["Lunes", "Martes", "Miercoles", "Jueves", "Viernes"][
                    dayIndex - 1
                  ],
                });
              }
            }
          }
        });

        console.log("Guardias seleccionadas:", selectedGuards);
        return selectedGuards;
      }

      const closeScheduleBtn = document.getElementById("closeScheduleBtn");

      if (closeScheduleBtn) {
        closeScheduleBtn.addEventListener("click", () => {
          const guardiasSeleccionadas = getSelectedGuards();
          console.log("Datos recopilados:", guardiasSeleccionadas);
          closeScheduleTable();
        });
      } else {
        console.warn("El botón 'closeScheduleBtn' no se encontró en el DOM.");
      }
    </script>
  </body>
</html>