---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase.js";

const { data: usuarios, error } = await supabase
  .from("usuarios")
  .select("id, nombre, correo, tipo, aceptado, created_at")
  .order("created_at", { ascending: true });
---

<Layout page_title="Gesti√≥n de Usuarios">
  <main class="content-wrapper">
    <h1 class="page-title">üè¢ Gesti√≥n de Usuarios</h1>

    <!-- Controles de filtrado -->
    <div class="controls">
      <div class="filters">
        <button class="filter-btn active" data-filter="all">üåê Todos</button>
        <button class="filter-btn" data-filter="active">‚úÖ Activos</button>
        <button class="filter-btn" data-filter="inactive">‚õî Inactivos</button>
      </div>

      <div class="search-box">
        <input
          type="text"
          id="search-input"
          placeholder="üîç Buscar por nombre..."
          class="search-input"
        />
      </div>
    </div>

    <!-- Tabla de usuarios -->
    {
      error ? (
        <div class="error-message">
          ‚ö†Ô∏è Error al cargar usuarios: {error.message}
        </div>
      ) : (
        <div class="table-wrapper">
          <div class="table-container">
            <table class="users-table">
              <thead>
                <tr>
                  <th>üë§ Nombre</th>
                  <th>üìß Correo</th>
                  <th>üéì Tipo</th>
                  <th>üìä Estado</th>
                  <th>‚úèÔ∏è Editar</th>
                </tr>
              </thead>
              <tbody id="users-list">
                {usuarios.map((usuario) => (
                  <tr
                    class="user-row"
                    data-status={usuario.aceptado ? "active" : "inactive"}
                    data-name={(usuario.nombre || "").toLowerCase()}
                    data-id={usuario.id}
                  >
                    <td>{usuario.nombre || "Sin nombre"}</td>
                    <td>{usuario.correo}</td>
                    <td class="user-type">{usuario.tipo || "N/A"}</td>
                    <td>
                      <span
                        class={`status-pill ${usuario.aceptado ? "active" : "inactive"}`}
                      >
                        {usuario.aceptado ? "Activo" : "Inactivo"}
                      </span>
                    </td>
                    <td class="actions">
                      <button
                        class="edit-btn"
                        data-id={usuario.id}
                        onclick={`window.location.href = '../updateUser/${usuario.id}'`}
                      >
                        ‚úèÔ∏è Editar
                      </button>
                    </td>
                  </tr>
                ))}
                <tr class="no-results">
                  <td colspan="5">üòû No se encontraron usuarios</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      )
    }
  </main>

  <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
      const filterButtons = document.querySelectorAll(".filter-btn");
      const searchInput = document.getElementById("search-input");
      const userRows = document.querySelectorAll(".user-row");
      const noResultsRow = document.querySelector(".no-results");

      function filterUsers() {
        const searchValue = searchInput.value.toLowerCase();
        const activeFilter =
          document.querySelector(".filter-btn.active").dataset.filter;
        let hasResults = false;

        userRows.forEach((row) => {
          const name = row.dataset.name;
          const status = row.dataset.status;
          const matchesFilter =
            activeFilter === "all" || status === activeFilter;
          const matchesSearch = name.includes(searchValue);

          if (matchesFilter && matchesSearch) {
            row.style.display = "";
            hasResults = true;
          } else {
            row.style.display = "none";
          }
        });

        noResultsRow.style.display = hasResults ? "none" : "table-row";
      }

      filterButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          filterButtons.forEach((btn) => btn.classList.remove("active"));
          e.target.classList.add("active");
          filterUsers();
        });
      });

      searchInput.addEventListener("input", filterUsers);
    });
  </script>

  <style>
    /* Contenedor principal */
    .content-wrapper {
      width: 100%;
      max-width: 1000px;
      padding: 2rem;
      margin: auto;
      background: #fff;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      text-align: center;
    }

    /* Controles de filtro y b√∫squeda */
    .controls {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
      align-items: center;
    }

    .filters {
      display: flex;
      gap: 0.8rem;
      flex-wrap: wrap; /* Permite que los botones se acomoden en varias filas si es necesario */
      justify-content: center;
    }

    .filter-btn {
      background: #e2e2e2;
      border: none;
      padding: 0.6rem 1.2rem;
      border-radius: 4px;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.3s;
    }

    .filter-btn:hover {
      background: #d1d1d1;
    }

    .filter-btn.active {
      background: #4caf50;
      color: #fff;
    }

    .search-box {
      display: flex;
      justify-content: center;
      width: 100%;
      max-width: 300px;
    }

    .search-input {
      width: 100%;
      padding: 0.6rem 1rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1rem;
      transition: border-color 0.3s;
    }

    .search-input:focus {
      border-color: #4caf50;
    }

    /* Tabla de usuarios */
    .table-wrapper {
      width: 100%;
      overflow-x: auto;
      margin-top: 1rem;
    }

    .table-container {
      min-width: 800px;
      max-width: 100%;
    }

    .users-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
      border-radius: 8px;
      overflow: hidden;
    }

    .users-table th,
    .users-table td {
      padding: 1rem;
      text-align: left;
      font-size: 1rem;
      border-bottom: 1px solid #f1f1f1;
    }

    .users-table th {
      background-color: #f8f8f8;
    }

    .users-table td {
      background-color: #fff;
    }

    .users-table tr:hover td {
      background-color: #f7f7f7;
    }

    .status-pill {
      padding: 0.3rem 0.6rem;
      border-radius: 20px;
      font-weight: bold;
    }

    .status-pill.active {
      background-color: #4caf50;
      color: #fff;
    }

    .status-pill.inactive {
      background-color: #f44336;
      color: #fff;
    }

    /* Fila sin resultados */
    .no-results {
      display: none;
      text-align: center;
      padding: 1rem;
      color: #888;
    }

    /* Bot√≥n de editar */
    .edit-btn {
      background: #4caf50;
      color: white;
      border: none;
      padding: 0.4rem 0.8rem;
      border-radius: 4px;
      cursor: pointer;
      transition: background 0.3s;
    }

    .edit-btn:hover {
      background: #45a049;
    }

    /* Respuesta a pantallas peque√±as */
    @media (max-width: 768px) {
      .content-wrapper {
        padding: 1.5rem;
      }

      .filters {
        flex-direction: column; /* Los filtros se apilan verticalmente en pantallas peque√±as */
        gap: 1rem;
      }

      .search-box {
        width: 100%;
        max-width: 100%; /* Ocupa todo el ancho disponible */
        padding: 0.5rem;
      }

      .search-input {
        width: 100%;
        font-size: 1rem;
      }

      .users-table th,
      .users-table td {
        padding: 0.8rem;
        font-size: 0.9rem;
      }

      .table-wrapper {
        overflow-x: scroll;
        max-height: 300px;
      }

      .users-table {
        font-size: 0.9rem; /* Reducir el tama√±o de la fuente en pantallas peque√±as */
      }
    }
  </style>
</Layout>
