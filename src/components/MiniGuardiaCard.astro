---
import { supabase } from "../lib/supabase";

const { guardia, user } = Astro.props;

const todayDate = new Date();
const todayLocal = new Date(
    todayDate.getTime() - todayDate.getTimezoneOffset() * 60000,
) // Ajusta a la zona horaria local
    .toISOString()
    .split("T")[0]; // Extrae YYYY-MM-DD basado en la zona horaria local
const isPatio = guardia.tipo === "recreo";
let activada = false;
let estaAsignada = false;

function extraerHoraGuardia(timestamp) {
    return timestamp.slice(11, 16);
}

function extraerHoraHorario(horario) {
    return horario.slice(0, 5);
}

// Comprobamos si la guardia está asignada
const { data: asignaciones, error } = await supabase
    .from("asignaciones_guardia")
    .select("*")
    .eq("id_guardia", guardia.id);

if (asignaciones == null) return;
estaAsignada = asignaciones.length > 0;

const fecha = new Date(todayLocal);
const diasSemana = [
    "Domingo",
    "Lunes",
    "Martes",
    "Miércoles",
    "Jueves",
    "Viernes",
    "Sábado",
];
const diaSemana = diasSemana[fecha.getDay()];

// Obtener los horarios de los profesores para el día de la semana de hoy
const { data: horariosProfesores, error: turnoError } = await supabase
    .from("horarios_profesor")
    .select("inicio, id_profesor")
    .eq("dia_semana", diaSemana);

if (turnoError) throw turnoError;

// Extraemos la hora de inicio de la guardia
const horaGuardia = extraerHoraGuardia(guardia.inicio);

// Filtramos los IDs de los profesores cuyo horario coincide con la guardia
const idsProfesoresDisponibles = horariosProfesores
    .filter((horario) => extraerHoraHorario(horario.inicio) === horaGuardia)
    .map((horario) => horario.id_profesor);

// Si no hay profesores disponibles, terminamos
if (idsProfesoresDisponibles.length === 0) {
    console.log("No hay profesores disponibles para la guardia.");
}

// Obtener los nombres de los profesores disponibles
const { data: profesoresDisponibles, error: errorProfesores } = await supabase
    .from("usuarios")
    .select("id, nombre")
    .in("id", idsProfesoresDisponibles);

if (errorProfesores) throw errorProfesores;

// Extraemos solo los nombres de los profesores
const nombresProfesoresDisponibles = profesoresDisponibles.map((p) => p.nombre);

if (nombresProfesoresDisponibles.includes(user.nombre)) {
    activada = true;
} else activada = false;

// Si no está activada quiere decir que el usuario no puede apuntarse a esa guardia.

// TODO
// [X] Mostrar vacio si no hay nada en el tramo horario
// [] Mostrar un efecto apagado si el usuario (profesor) no se puede asignar la guardia porque está fuera de su horario de guardias.
// [X] Que las guardias sean clickeables, apareciendo un modal diciendo qué profesor podría cubrir esa guardia en caso de no estar asignada
// [] Estilar el modal.
// [] Filtrar las guardias disponibles también por horario.
---


<div 
  class={`miniguardia ${estaAsignada ? "asignada" : "sin-asignar"} ${activada ? "activada" : "sin-activar"}`}
  data-guardia={JSON.stringify(guardia)}
>
    <div class="estado">
        <strong>{estaAsignada ? "ASIGNADA" : "SIN ASIGNAR"}</strong>
    </div>
    <div class="guardiaContent">
        <p style="margin-top: 0px;">Tipo: {guardia.tipo}</p>
        <p>Aula: {guardia.id_aula || "N/A"}</p>
        <p>Observaciones: {guardia.observaciones || "Ninguna"}</p>
    </div>
</div>

<style>
    .miniguardia {
        box-sizing: border-box;
        border: 2px solid;
        border-radius: 3px;

        width: 100%;
    }

    .miniguardia.sin-activar {
        background-color: rgb(209, 209, 209) !important;
        border-color: rgb(158, 158, 158) !important;
    }

    .guardiaContent {
        padding: 10px;
    }

    .estado {
        font-size: 8px;

        letter-spacing: 2px;
        margin: 0px;
        text-align: center;
        padding: 2px;

        border-bottom: 1px solid;
        border-color: inherit;
    }

    .miniguardia.asignada {
        border-color: rgb(1, 199, 199);
        background-color: rgba(111, 255, 255, 0.877);
    }

    .miniguardia.sin-asignar {
        border-color: rgb(194, 2, 2);
        background-color: rgba(255, 131, 131, 0.877);
    }

    .modal {
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
        background: rgba(0, 0, 0, 0.5);

        button {
            width: 100%;
            height: 50px;
        }
    }

    .profes-dispo {
        display: flex;
        flex-direction: column;
        max-height: 300px; /* Adjust as needed */
        overflow-y: auto;
        gap: 8px;
    }

    .modal.oculto {
        display: none;
    }

    .modal-contenido {
        background: white;
        padding: 20px;
        border-radius: 5px;
        width: 85%; /* Ajusta el ancho */
        max-width: 900px; /* Evita que sea demasiado grande */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .cerrar {
        cursor: pointer;
        font-size: 25px;
    }
</style>

<script is:inline>
    // Seleccionar todos los elementos con la clase miniguardia
  document.querySelectorAll('.miniguardia').forEach(element => {
    if (element.dataset.initialized) return;
    
    // Guardar datos en el dataset
    const guardiaData = JSON.parse(element.dataset.guardia);
    
    element.addEventListener('click', async function(e) {
      e.stopPropagation();
      const infoEvent = new CustomEvent('open-info-modal', {
        detail: {
          guardia: guardiaData,
          isMini: true,
          isActivada: element.classList.contains('activada'),
          isAsignada: element.classList.contains('asignada'),
        },
        bubbles: true,
      });
      this.dispatchEvent(infoEvent);
    });
    
    // Marcar como inicializado
    element.dataset.initialized = "true";
  });
</script>
