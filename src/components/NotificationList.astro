---
import { supabase } from "../lib/supabase.js";

// Recuperar sesión actual
const { data: { session } } = await supabase.auth.getSession();
if (!session) throw new Error("User is not logged in");

// Recuperar usuario actual con la id de usuario de la sesión actual
const { data: user, error: userError } = await supabase
  .from("usuarios")
  .select("*")
  .eq("auth_id", session.user.id)
  .single();
if (userError) throw userError;

const userId = user.id;

// Consulta para obtener las notificaciones asociadas al usuario mediante INNER JOIN
const { data: notificaciones, error: notifError } = await supabase
  .from("notificacion")
  .select(`
    id,
    mensaje,
    created_at,
    visto,
    asignaciones_notificaciones!inner(
      id,
      id_usuario
    )
  `)
  .eq("asignaciones_notificaciones.id_usuario", userId)
  .order("created_at", { ascending: false }); // Ordena por fecha descendente

if (notifError) throw notifError;

// Obtener los IDs de todas las notificaciones recuperadas
const notificacionIds = notificaciones.map(n => n.id);

// Marcar como vistas en la base de datos (pero no en la app)
if (notificacionIds.length > 0) {
  const { error: updateError } = await supabase
    .from("notificacion")
    .update({ visto: true })
    .in("id", notificacionIds);

  if (updateError) console.error("Error al actualizar las notificaciones:", updateError);
}
---

<div class="list">
    {notificaciones?.length > 0 ? (
        notificaciones.map((n) => (
            <div 
                class={`notification ${!n.visto ? 'unread' : ''}`} 
                data-id={n.id}
            >
                <div class="notification-info">
                    <p class="message">{n.mensaje}</p>
                    <span class="date">{new Date(n.created_at).toLocaleString()}</span>
                </div>
                <div class="notification-icon">
                    <svg 
                        xmlns="http://www.w3.org/2000/svg" 
                        width="24" 
                        height="24" 
                        viewBox="0 0 24 24" 
                        fill="none" 
                        stroke="currentColor" 
                        stroke-width="2" 
                        stroke-linecap="round" 
                        stroke-linejoin="round" 
                        class={`lucide lucide-bell ${!n.visto ? 'unread-icon' : ''}`}
                    >
                        <path d="M10.268 21a2 2 0 0 0 3.464 0"/>
                        <path d="M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"/>
                    </svg>
                </div>
            </div>
        ))
    ) : (
      <p>No tienes notificaciones</p>
    )}
</div>

<style>
  .notification-container {
    width: 100%;
    max-width: 500px;
    margin: auto;
    padding: 20px;
    border-radius: 10px;
    background: #f9f9f9;
  }
  
  h2 {
    text-align: center;
  }
  
  .list {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .notification {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px;
    border-radius: 5px;
    background: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: border-left 0.3s ease;
    border-left: 5px solid transparent; /* Borde transparente por defecto */
  }

  .notification {
    border-left: 5px solid #2C3E50;
  }
  
  .notification.unread {
    border-left: 5px solid #007bff; /* Azul si no ha sido vista */
  }
  
  .notification-info {
    display: flex;
    flex-direction: column;
  }
  
  .message {
    font-size: 14px;
    margin: 0;
  }
  
  .date {
    font-size: 12px;
    color: gray;
    margin-top: 5px;
  }
  
  .notification-icon {
    display: flex;
    align-items: center;
  }

  .unread-icon {
    stroke: #007bff; /* Color azul si la notificación no ha sido vista */
  }
</style>