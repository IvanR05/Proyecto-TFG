---
import { isAborted } from "astro:schema";

const { guardia, owned, isAdmin } = Astro.props;
const guardiaData = JSON.stringify(guardia);
const admin = isAdmin;

function getDate(date) {
  const options = { weekday: "long", day: "numeric", month: "long" };
  const formattedDate = date.toLocaleDateString("es-ES", options);
  return formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);
}

function formatTime(date) {
  return date.toLocaleTimeString("es-ES", {
    hour: "2-digit",
    minute: "2-digit",
  });
}

---

<!-- Contenedor de la guardia -->
<div class="guardia-container" data-guardia={guardiaData} data-owned={owned} data-admin={admin}>
  <div class={`guardia-card ${owned ? "owned" : ""}`}>
    <p><strong>DÃ­a:</strong> {getDate(new Date(guardia.inicio))}</p>
    <p>
      <strong>Tramo horario:</strong>
      {formatTime(new Date(guardia.inicio))} - {formatTime(new Date(guardia.fin))}
    </p>
    <p><strong>Tipo:</strong> {guardia.tipo}</p>
    <p><strong>Aula:</strong> {guardia.id_aula}</p>

    {admin && (
      <div class="admin-buttons">
       <button >
          <img class="editButton" src="/edit.png" style="height: 20px;"/>
       </button>
       <button>
        <img class="deleteButton" src="/trash.png" style="height: 20px"/>
       </button>
      </div>
    )}
  </div>

  

</div>

<style>
  .guardia-card {
    z-index: 3;
    border: 2px solid #4a90e2;
    padding: 1rem;
    border-radius: 8px;
    background-color: #ffffff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 300px;
    margin-bottom: 1rem;
    cursor: pointer;
    transition: transform 0.2s;
  }
  .guardia-card:hover {
    transform: translateY(-2px);
  }
  .guardia-card.owned {
    border-color: #28a745;
  }

  .admin-buttons {
    z-index: 4;
    gap: 14px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;

    button {
      border: 0px;
    }
  }

  .confirm-button, .cancel-button, .close-modal {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
  }
  .confirm-button {
    background-color: #4a90e2;
    color: white;
  }
  .confirm-button:hover {
    background-color: #357abd;
  }
  .cancel-button {
    background-color: #e74c3c;
    color: white;
  }
  .cancel-button:hover {
    background-color: #c0392b;
  }
  .close-modal {
    background-color: #e0e0e0;
    color: #333;
  }
  .close-modal:hover {
    background-color: #c0c0c0;
  }
</style>

<script is:inline>
  document.querySelectorAll('.guardia-container').forEach(container => {
    if (container.dataset.initialized) return;
    container.dataset.initialized = "true";

    const guardiaObj = JSON.parse(container.dataset.guardia);
    const owned = container.dataset.owned === "true";

    const card = container.querySelector(".guardia-card");
    const editButton = container.querySelector(".editButton");
    const deleteButton = container.querySelector(".deleteButton");

    const confirmModal = container.querySelector(".confirm-modal");
    
    const confirmButton = container.querySelector(".confirm-button");
    const closeButtons = container.querySelectorAll(".close-modal");

    card.addEventListener("click", async function(e) {
      console.log("yes")
      const infoEvent = new CustomEvent('open-info-modal', {
        detail: {
          guardia: guardiaObj,
          isMini: false,
          isOwned: owned,
        },
        bubbles: true
      });
      this.dispatchEvent(infoEvent);
      
    });

    deleteButton.addEventListener("click", async function(e) {
      e.stopPropagation();
      deleteGuardia(guardiaObj, container); // Pasa los parÃ¡metros necesarios
    });

    editButton.addEventListener("click", async function(e) {
      // Dispara un evento personalizado con los datos de la guardia
      e.stopPropagation();
      const editEvent = new CustomEvent('open-edit-modal', {
        detail: guardiaObj,
        bubbles: true
      });
      this.dispatchEvent(editEvent);
    });

  });


  async function deleteGuardia(guardiaObj, container) {
    const confirmed = confirm("Â¿Eliminar guardia?");
    if (confirmed) {
        container.remove();
        try {
            const response = await fetch('/api/delete-guardia', {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: guardiaObj.id }),
            });

            const data = await response.json();
            if (response.ok) {
                alert('Guardia eliminada correctamente');
                location.reload(); // ðŸ”„ Recargar la pÃ¡gina para reflejar los cambios
            } else {
                alert(`Error: ${data.message}`);
            }
        } catch (error) {
            console.error('Error eliminando el aula:', error);
            alert('Hubo un problema al eliminar el aula.');
        }
    }
  }

  

</script>
