---
import { supabase } from "../lib/supabase";
import turnos from "../assets/turnos.json";
import MiniGuardiaCard from "./MiniGuardiaCard.astro";

// 1. Primero obtenemos el turno al que pertenece el usuario
let turno;

// Get current session
const {
  data: { session },
} = await supabase.auth.getSession();
if (!session) throw new Error("User is not logged in");

// Fetch the user record from 'usuarios' using .single()
const { data: user, error: userError } = await supabase
  .from("usuarios")
  .select("*")
  .eq("auth_id", session.user.id)
  .single();
if (userError) throw userError;

const { data: turnoData, error: turnoError } = await supabase
  .from("horarios_profesor")
  .select("turno, inicio")
  .eq("id_profesor", user.id);

if (turnoError) throw turnoError;

turno = turnoData[0].turno;

// 2. Sacamos todas las guardias para el día de hoy
//const today = new Date().toISOString().split("T")[0];
const turnoActual = turnos[turno];

if (!turnoActual) {
  throw new Error("Turno no válido");
}

const todayDate = new Date();
const todayLocal = new Date(todayDate.getTime() - todayDate.getTimezoneOffset() * 60000) // Ajusta a la zona horaria local
  .toISOString()
  .split("T")[0]; // Extrae YYYY-MM-DD basado en la zona horaria local

const inicioTurno = `${todayLocal}T${turnoActual[0].start}:00`;
const finTurno = `${todayLocal}T${turnoActual[turnoActual.length - 1].end}:00`;


// Cogemos todas las guardias entre el principio del día y el final del día.
const { data: guardiasHoy, error: guardiasError } = await supabase
  .from("guardias")
  .select("*")
  .gte("inicio", inicioTurno)
  .lte("fin", finTurno);

if (guardiasError) throw guardiasError;

// 3. Dividir las guardias en función de su tramo horario definido en turnos.json

const slotKeys = [
  "primera",
  "segunda",
  "tercera",
  "recreo",
  "cuarta",
  "quinta",
  "sexta",
  "septima",
];
const guardiasPorTramo = slotKeys.reduce((acc, key) => {
  acc[key] = [];
  return acc;
}, {});

// Función auxiliar para extraer "HH:MM" sin conversión de zona horaria
function extraerHoraMinutos(timestamp) {
  return timestamp.slice(11, 16);
}

guardiasHoy.forEach((guardia) => {
  const guardiaStart = extraerHoraMinutos(guardia.inicio);
  const guardiaEnd = extraerHoraMinutos(guardia.fin);

  turnoActual.forEach((slot, index) => {
    if (slot.start === guardiaStart && slot.end === guardiaEnd) {
      const key = slotKeys[index];
      guardiasPorTramo[key].push(guardia);
    }
  });
});
---

<div class="guardias-table">
  <table>
    <thead>
      <tr>
        {
          turnoActual.map((slot) => (
            <th>
              {slot.start}-{slot.end}
            </th>
          ))
        }
      </tr>
    </thead>
    <tbody>
      <tr>
        {
          slotKeys.map((key) => (
            <td>
              <div class="time-column">
                {guardiasPorTramo[key].length > 0 ? (
                  guardiasPorTramo[key].map((guardia) => (
                    <MiniGuardiaCard guardia={guardia} user={user}/>
                  ))
                ) : (
                  <div class="empty-slot">
                    <span style="padding: 10px; border-radius: 10px; background-color: white;">
                      Vacío
                    </span>
                  </div>
                )}
              </div>
            </td>
          ))
        }
      </tr>
    </tbody>
  </table>
  

  <script>
    /* nothing here yet */
  </script>
</div>

<style>
  .guardias-table {
    overflow-x: auto;
    width: 100%;
    border: 1px solid #ddd;
    background-color: white;
    position: relative;
    margin-bottom: 20px;
  }

  .guardias-table table {
    width: 100%;
    border-collapse: collapse;
  }

  .guardias-table thead th {
    position: sticky;
    top: 0;
    background: #f5f5f5;
    padding: 1rem;
    text-align: center;
    border-right: 1px solid #ddd;
    z-index: 10;
    min-width: 140px;
  }

  /* Set fixed height for table cells */
  .guardias-table tbody td {
    border-right: 1px solid #ddd;
    vertical-align: top;
    height: fit-content; /* Fixed height for all cells */
  }

  

  /* Make time-column scrollable */
  .time-column {
    display: flex;
    flex-grow: 1;
    flex-direction: column;
    height: 100%; /* Take full height of parent td */
    overflow-y: auto; /* Enable vertical scrolling */
    gap: 0.5rem;
  }

  .empty-slot {
    display: flex;
    flex-grow: 1;
    align-items: center;
    justify-content: center;
    background-color: rgba(252, 196, 92, 0.877);
    height: 100%; /* Fill parent height */
    width: 100%; /* Full width */
    padding: 10px; /* Move padding here from inner span */
    box-sizing: border-box; /* Include padding in height calculation */
  }

  .empty-slot span {
    display: block;
    border-radius: 10px;
    background-color: white;
    padding: 10px;
  }

  #current-time-line {
    position: absolute;
    top: 0;
    width: 2px;
    height: 100%;
    background: red;
    z-index: 100;
  }
</style>
